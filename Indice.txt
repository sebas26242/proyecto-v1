(ojo no pude agregar color, investigue y lo probe pero no lo logre) :-(

capitulo 1 Introducción a Git
Git es un sistema de control de versiones distribuido, lo que significa que un clon local del proyecto es un repositorio
de control de versiones completo. Estos repositorios locales plenamente funcionales permiten trabajar sin
conexión o de forma remota con facilidad.

En pocas palabras, GIT es un sistema que te ayuda a organizar el código de trabajo, el historial y evolución del mismo.
Funciona como una maquina del tiempo que te permite navegar a diferentes versiones de tu proyecto, no solo eso.

Un flujo de trabajo de Git es una fórmula o una recomendación sobre cómo usar Git para llevar a cabo el trabajo de 
forma homogénea y productiva. Los flujos de trabajo de Git animan a los desarrolladores y a los equipos de DevOps a 
sacar partido a Git de forma eficaz y estable.

Capítulo 2: Flujo de trabajo básico

Git es un sistema de control de versiones distribuido, lo que significa que un clon local del proyecto es un 
repositorio de control de versiones completo. Estos repositorios locales plenamente funcionales permiten 
trabajar sin conexión o de forma remota con facilidad.

Cuando evalúas un flujo de trabajo para tu equipo, lo más importante es que tengas en cuenta la cultura de tu equipo. 
Quieres que el flujo de trabajo mejore la eficacia de tu equipo, no que sea una carga que limite la productividad. 
Estas son algunas cosas que debes tener en cuenta a la hora de evaluar un flujo de trabajo de Git:

-¿Este flujo de trabajo se escala acorde al tamaño del equipo?
-¿Es fácil deshacer los errores y los fallos con este flujo de trabajo?
-¿Este flujo de trabajo impone al equipo excesos cognitivos nuevos e innecesarios?

El flujo de trabajo centralizado es un flujo de trabajo de Git estupendo para equipos que están realizando la migración desde Subversion (SVN). Al igual que SVN, el flujo de trabajo centralizado usa un repositorio central como punto de entrada de todos los cambios al proyecto. En lugar de trunk, la rama de desarrollo predeterminada se llama main (principal), y todos los cambios se confirman en dicha rama. Este flujo de trabajo no requiere ninguna rama más aparte de main.

La migración a un sistema de control de versiones distribuido puede parecer una tarea complicada, pero no tienes que cambiar tu flujo de trabajo existente para sacarle partido a Git. Tu equipo puede desarrollar proyectos del mismo modo en el que lo hacían con Subversion.

No obstante, usar Git para impulsar tu flujo de trabajo de desarrollo presenta algunas ventajas en comparación con SVN. En primer lugar, le brinda a cada desarrollador su propia copia local del proyecto completo. Este entorno aislado deja que cada desarrollador trabaje de forma independiente a todos los demás cambios de un proyecto; pueden añadir confirmaciones a su repositorio local y olvidarse por completo de los desarrollos posteriores hasta que los necesiten.

Capítulo 3: Gestión de ramas

La idea principal subyacente del flujo de trabajo de ramas de función es que el desarrollo de una función debe llevarse a cabo en una rama especializada en lugar de en la rama main. Este aislamiento permite que varios desarrolladores trabajen en una función concreta sin modificar el contenido del código base principal. También implica que la rama main no contendrá en ningún caso código erróneo, lo que supone una gran ventaja para los entornos de integración continua.

El desarrollo de la función de aislamiento también permite aprovechar solicitudes de incorporación de cambios, que constituyen una forma de iniciar debates en torno a una rama, ya que brindan a otros desarrolladores la oportunidad de dar el visto bueno a una función antes de que esta se integre en el proyecto oficial. Otra posibilidad es que, si te atascas en medio de una función, abras una solicitud de incorporación de cambios en la que pidas sugerencias a tus compañeros. 
El caso es que las solicitudes de incorporación de cambios hacen que a tu equipo le resulte increíblemente fácil comentarse el trabajo de forma recíproca.

El flujo de trabajo de ramas de función en Git es un flujo de trabajo que puede estar compuesto por diversos elementos y que pueden aprovechar otros flujos de trabajo de Git de alto nivel. En la página de descripción general de los flujos de trabajo de Git ya comentamos otros flujos de trabajo de Git. El flujo de trabajo de ramas de función en Git es un modelo centrado en la creación de ramas, lo que significa que es un marco que sirve de patrón para la gestión y creación de ramas. 
Otros flujos de trabajo están más centrados en el repositorio. El flujo de trabajo de ramas de función en Git se puede incorporar a otros flujos de trabajo Gitflow y los flujos de trabajo de bifurcación de Git usan tradicionalmente un flujo de trabajo de ramas de función en Git con respecto a sus modelos de creación de ramas.

Funcionamiento

El flujo de trabajo de ramas de función presupone la existencia de un repositorio central, y la rama main representa el historial oficial del proyecto. En vez de confirmar directamente en la rama main local, los desarrolladores crean una rama cada vez que empiezan a trabajar en una función nueva. Las ramas de función deben tener nombres descriptivos como, por ejemplo, "elementos-animados-menu" o "incidencia-#1061". La idea es asignar un objetivo claro y muy concreto a cada rama. 
Git no hace ninguna distinción técnica entre la rama main y las de función, por lo que los desarrolladores pueden editar, preparar y confirmar cambios en una rama de función.
Además, las ramas de función pueden (y deben) enviarse al repositorio central, lo que permite compartir una función con otros desarrolladores sin tocar nada del código oficial. Dado que la rama main es la única "especial", almacenar varias ramas de función en el repositorio central no supone ningún problema. Indudablemente, esta también supone una forma práctica de hacer una copia de seguridad de las confirmaciones locales de todo el mundo. A continuación, presentamos un recorrido por todo el ciclo de vida de una rama de función.

Capítulo 4: Repositorios remotos

Los repositorios remotos son versiones de tu proyecto que están hospedadas en Internet o en cualquier otra red. Puedes tener varios de ellos, y en cada uno tendrás generalmente permisos de solo lectura o de lectura y escritura.

Trabajar con Remotos
Para poder colaborar en cualquier proyecto Git, necesitas saber cómo gestionar repositorios remotos. Los repositorios remotos son versiones de tu proyecto que están hospedadas en Internet o en cualquier otra red. Puedes tener varios de ellos, y en cada uno tendrás generalmente permisos de solo lectura o de lectura y escritura. Colaborar con otras personas implica gestionar estos repositorios remotos enviando y trayendo datos de ellos cada vez que necesites compartir tu trabajo. 
Gestionar repositorios remotos incluye saber cómo añadir un repositorio remoto, eliminar los remotos que ya no son válidos, gestionar varias ramas remotas, definir si deben rastrearse o no y más. En esta sección, trataremos algunas de estas habilidades de gestión de remotos.

Para ver los remotos que tienes configurados, debes ejecutar el comando git remote. Mostrará los nombres de cada uno de los remotos que tienes especificados. Si has clonado tu repositorio, deberías ver al menos origin (origen, en inglés) - este es el nombre que por defecto Git le da al servidor del que has clonado:
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)

Añadir Repositorios Remotos
En secciones anteriores hemos mencionado y dado alguna demostración de cómo añadir repositorios remotos. Ahora veremos explícitamente cómo hacerlo. Para añadir un remoto nuevo y asociarlo a un nombre que puedas referenciar fácilmente, ejecuta git remote add [nombre] [url]:
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)

Enviar a Tus Remotos
Cuando tienes un proyecto que quieres compartir, debes enviarlo a un servidor. El comando para hacerlo es simple: git push [nombre-remoto] [nombre-rama]. Si quieres enviar tu rama master a tu servidor origin (recuerda, clonar un repositorio establece esos nombres automáticamente), entonces puedes ejecutar el siguiente comando y se enviarán todos los commits que hayas hecho al servidor:
$ git push origin master

Inspeccionar un Remoto
Si quieres ver más información acerca de un remoto en particular, puedes ejecutar el comando git remote show [nombre-remoto]. Si ejecutas el comando con un nombre en particular, como origin, verás algo como lo siguiente:

$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
El comando lista la URL del repositorio remoto y la información del rastreo de ramas. El comando te indica claramente que si estás en la rama maestra y ejecutas el comando git pull, automáticamente combinará la rama maestra remota con tu rama local, luego de haber traído toda la información de ella. También lista todas las referencias remotas de las que ha traído datos.
